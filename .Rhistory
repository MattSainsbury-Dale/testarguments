plot(x, Z)
n <- 100                                          # data set size
x <- seq(-1, 1, length.out = n)                   # covariate
mu <- 1 + x + x^2 + x^3                           # true mean
Z <- mu + rnorm(n, sd = 0.1)                      # data
plot(x, Z)
n <- 100                                          # data set size
x <- seq(-1, 1, length.out = n)                   # covariate
mu <- 1 + x + -x^2 + x^3                           # true mean
Z <- mu + rnorm(n, sd = 0.1)                      # data
plot(x, Z)
n <- 100                                          # data set size
x <- seq(-1, 1, length.out = n)                   # covariate
mu <- 1 + x + x^2 + x^3 + x^4                         # true mean
Z <- mu + rnorm(n, sd = 0.1)                      # data
plot(x, Z)
n <- 100                                          # data set size
x <- seq(-1, 1, length.out = n)                   # covariate
mu <- 1 + x + x^2 + x^3 + -x^4                         # true mean
Z <- mu + rnorm(n, sd = 0.1)                      # data
plot(x, Z)
n <- 100                                          # data set size
x <- seq(-1, 1, length.out = n)                   # covariate
mu <- 1 + x + x^2 + x^3 + -x^4                         # true mean
Z <- mu + rnorm(n, sd = 0.05)                      # data
plot(x, Z)
n <- 100                                          # data set size
x <- seq(-1, 1, length.out = n)                   # covariate
mu <- 1 + x + x^2 + 3 * x^3 + -x^4                         # true mean
Z <- mu + rnorm(n, sd = 0.05)                      # data
plot(x, Z)
n <- 100                                          # data set size
x <- seq(-1, 1, length.out = n)                   # covariate
mu <- 1 + x + x^2 + 3 * x^3 - 4 * x^4                         # true mean
Z <- mu + rnorm(n, sd = 0.05)                      # data
plot(x, Z)
n <- 100                                          # data set size
x <- seq(-1, 1, length.out = n)                   # covariate
mu <- 1 + x + x^2 + 3 * x^3 - 2 * x^4                         # true mean
Z <- mu + rnorm(n, sd = 0.05)                      # data
plot(x, Z)
mu <- 1 + x + 2 * x^2 + 3 * x^3 - 2 * x^4                         # true mean
Z <- mu + rnorm(n, sd = 0.05)                      # data
plot(x, Z)
mu <- 1 + x + 2 * x^2 + 3 * x^3 - 3 * x^4                         # true mean
Z <- mu + rnorm(n, sd = 0.05)                      # data
plot(x, Z)
mu <- 1 + x + 2 * x^2 + 3 * x^3 - 3 * x^4                         # true mean
Z <- mu + rnorm(n, sd = 0.05)                      # data
plot(x, Z)
mu <- 1 + x + x^2 + x^3 + x^4                         # true mean
Z <- mu + rnorm(n, sd = 0.05)                      # data
plot(x, Z)
x <- seq(-2, 2, length.out = n)                   # covariate
mu <- 1 + x + 2 * x^2 + 3 * x^3 - 3 * x^4                         # true mean
mu <- 1 + x + x^2 + x^3 + x^4                         # true mean
Z <- mu + rnorm(n, sd = 0.05)                      # data
plot(x, Z)
mu <- 1 + x + x^2 + x^3 - x^4                         # true mean
Z <- mu + rnorm(n, sd = 0.05)                      # data
plot(x, Z)
n <- 100                                          # data set size
x <- seq(-1, 2, length.out = n)                   # covariate
mu <- 1 + x + 2 * x^2 + 3 * x^3 - 3 * x^4                         # true mean
mu <- 1 + x + x^2 + x^3 - x^4                         # true mean
Z <- mu + rnorm(n, sd = 0.05)                      # data
plot(x, Z)
M <- lm(Z ~ poly(x,4), data = df_train)
predict.lm(newdata = df_test)
predict.lm(M, newdata = df_test)
Z_hat <- predict.lm(M, newdata = df_test)
data.frame(Z_hat = Z_hat)
diagnostic_fun <- function(df) {
with(df, c(
RMSE = mean((Z - Z_hat)^2)
))
}
Z_hat <- predict.lm(M, newdata = df_test, interval = "confidence", level = 0.99)
Z_hat
Z_hat %>% head
head(Z_hat)
pred <- predict.lm(M, newdata = df_test, interval = "confidence", level = 0.99)
class(pred)
diagnostic_fun <- function(df) {
with(df, c(
RMSE = sqrt(mean((Z - fit)^2)),
coverage = mean((Z < upr) & (Z > lwr))
))
}
n <- 100                                          # data set size
x <- seq(-1, 2, length.out = n)                   # covariate
mu <- 1 + x + x^2 + x^3 - x^4                     # true mean
Z <- mu + rnorm(n, sd = 0.05)                     # data
plot(x, Z)
df <- data.frame(x = x, Z = Z)
train_id <- sample(1:n, n/2, replace = FALSE)
df_train <- df[train_id, ]                        # training set
df_test  <- df[-train_id, ]                       # testing set
fun <- function(df_train, df_test, degree) {
## Fit a polygo
M <- lm(Z ~ poly(x, degree), data = df_train)
pred <- predict.lm(M, newdata = df_test, interval = "confidence", level = 0.99)
## NB: Predictions must be a matrix-like object with named columns.
## In this example, pred is a matrix with columns fit (the predicted-values),
## and lwr and upr (the lower and upper bounds of the 90% confidence interval)
return(pred)
}
diagnostic_fun <- function(df) {
with(df, c(
RMSE = sqrt(mean((Z - fit)^2)),
coverage = mean((Z < upr) & (Z > lwr)),
interval_width = mean(upr - lwr)
))
}
testargs_object <- test_arguments(
fun, df_train, df_test, diagnostic_fun,
arguments = list(degree = 1:4)
)
devtools::load_all(".")
testargs_object <- test_arguments(
fun, df_train, df_test, diagnostic_fun,
arguments = list(degree = 1:4)
)
pred
testargs_object <- test_arguments(
fun, df_train, df_test, diagnostic_fun,
arguments = list(degree = 1:4)
)
is.null(names(pred))
head(pred)
names(pred) <- c("a", "b", "c")
head(pred)
is.null(names(pred))
pred <- predict.lm(M, newdata = df_test, interval = "confidence", level = 0.99)
head(pred)
is.null(names(pred))
names(pred) <- c("a", "b", "c")
head(pred)
names(pred) <- c("a", "b", "c")
head(pred)
pred <- predict.lm(M, newdata = df_test, interval = "confidence", level = 0.99)
pred[1, ]
pred[2, ]
slots(pred)
slotNames(pred)
slotNames("matrix")
?`matrix-class`
dimnames(pred)
dimnames(pred)[[2]]
dimnames(data.frame(x = 5))
dimanmes(matrix(1))
dimnames(matrix(1))
names(pred) <- dimnames(pred)[[2]]
devtools::load_all(".")
testargs_object <- test_arguments(
fun, df_train, df_test, diagnostic_fun,
arguments = list(degree = 1:4)
)
plot_diagnostics(testargs_object)
diagnostic_fun <- function(df) {
with(df, c(
RMSE = sqrt(mean((Z - fit)^2))
))
}
testargs_object <- test_arguments(
fun, df_train, df_test, diagnostic_fun,
arguments = list(degree = 1:4)
)
plot_diagnostics(testargs_object)
n <- 10000                                        # data set size
x <- seq(-1, 2, length.out = n)                   # covariate
mu <- 1 + x + x^2 + x^3 - x^4                     # true mean
Z <- mu + rnorm(n, sd = 0.05)                     # data
plot(x, Z)
df <- data.frame(x = x, Z = Z)
train_id <- sample(1:n, n/2, replace = FALSE)
df_train <- df[train_id, ]                        # training set
df_test  <- df[-train_id, ]                       # testing set
fun <- function(df_train, df_test, degree) {
## Fit a polygo
M <- lm(Z ~ poly(x, degree), data = df_train)
pred <- predict.lm(M, newdata = df_test, interval = "confidence", level = 0.99)
## NB: Predictions must be a matrix-like object with named columns.
## In this example, pred is a matrix with columns fit (the predicted-values),
## and lwr and upr (the lower and upper bounds of the 90% confidence interval)
return(pred)
}
diagnostic_fun <- function(df) {
with(df, c(
RMSE = sqrt(mean((Z - fit)^2))
))
}
testargs_object <- test_arguments(
fun, df_train, df_test, diagnostic_fun,
arguments = list(degree = 1:4)
)
plot_diagnostics(testargs_object)
n <- 100000                                       # data set size
x <- seq(-1, 2, length.out = n)                   # covariate
mu <- 1 + x + x^2 + x^3 - x^4                     # true mean
Z <- mu + rnorm(n, sd = 0.05)                     # data
df <- data.frame(x = x, Z = Z)
train_id <- sample(1:n, n/2, replace = FALSE)
df_train <- df[train_id, ]                        # training set
df_test  <- df[-train_id, ]                       # testing set
fun <- function(df_train, df_test, degree) {
## Fit a polygo
M <- lm(Z ~ poly(x, degree), data = df_train)
pred <- predict.lm(M, newdata = df_test, interval = "confidence", level = 0.99)
## NB: Predictions must be a matrix-like object with named columns.
## In this example, pred is a matrix with columns fit (the predicted-values),
## and lwr and upr (the lower and upper bounds of the 90% confidence interval)
return(pred)
}
diagnostic_fun <- function(df) {
with(df, c(
RMSE = sqrt(mean((Z - fit)^2))
))
}
testargs_object <- test_arguments(
fun, df_train, df_test, diagnostic_fun,
arguments = list(degree = 1:4)
)
plot_diagnostics(testargs_object)
n <- 100                                          # data set size
x <- seq(-1, 2, length.out = n)                   # covariate
mu <- 1 + x + x^2 + x^3 - x^4                     # true mean
Z <- mu + rnorm(n, sd = 0.05)                     # data
df <- data.frame(x = x, Z = Z)
train_id <- sample(1:n, n/2, replace = FALSE)
df_train <- df[train_id, ]                        # training set
df_test  <- df[-train_id, ]                       # testing set
fun <- function(df_train, df_test, degree) {
## Fit a polygo
M <- lm(Z ~ poly(x, degree), data = df_train)
pred <- predict.lm(M, newdata = df_test, interval = "confidence", level = 0.99)
## NB: Predictions must be a matrix-like object with named columns.
## In this example, pred is a matrix with columns fit (the predicted-values),
## and lwr and upr (the lower and upper bounds of the 90% confidence interval)
return(pred)
}
diagnostic_fun <- function(df) {
with(df, c(
RMSE = sqrt(mean((Z - fit)^2))
))
}
testargs_object <- test_arguments(
fun, df_train, df_test, diagnostic_fun,
arguments = list(degree = 1:4)
)
plot_diagnostics(testargs_object)
diagnostic_fun <- function(df) {
with(df, c(
RMSE = sqrt(mean((Z - fit)^2)),
MAE  = mean(abs(Z - fit))
))
}
testargs_object <- test_arguments(
fun, df_train, df_test, diagnostic_fun,
arguments = list(degree = 1:4)
)
plot_diagnostics(testargs_object)
testargs_object <- test_arguments(
fun, df_train, df_test, diagnostic_fun,
arguments = list(degree = 0:4)
)
testargs_object <- test_arguments(
fun, df_train, df_test, diagnostic_fun,
arguments = list(degree = 1:4)
)
plot_diagnostics(testargs_object)
pred <- predict.lm(M, newdata = df_test)      # predict over the test set
pred
class(pred)
## NB: Predictions must be a matrix-like object with named columns.
## In this example, pred is a matrix with columns fit (the predicted-values)
names(pred) <- "fit"
pred
pred <- predict.lm(M, newdata = df_test)      # predict over the test set
pred_values <- predict.lm(M, newdata = df_test) # Predict over the test set
as.matrix(pred_values)
n <- 100                                          # data set size
x <- seq(-1, 2, length.out = n)                   # covariate
mu <- 1 + x + x^2 + x^3 - x^4                     # true mean
Z <- mu + rnorm(n, sd = 0.05)                     # data
df <- data.frame(x = x, Z = Z)
train_id <- sample(1:n, n/2, replace = FALSE)
df_train <- df[train_id, ]                        # training set
df_test  <- df[-train_id, ]                       # testing set
fun <- function(df_train, df_test, d) {
## Fit a polynomial model of degree d, and predict over the test set
M <- lm(Z ~ poly(x, d), data = df_train)
pred <- predict.lm(M, newdata = df_test)
## NB: Predictions must be a matrix-like object with named columns
pred <- as.matrix(pred)
names(pred) <- "fit"
return(pred)
}
diagnostic_fun <- function(df) {
with(df, c(
RMSE = sqrt(mean((Z - fit)^2)),
MAE  = mean(abs(Z - fit))
))
}
testargs_object <- test_arguments(
fun, df_train, df_test, diagnostic_fun,
arguments = list(d = 1:4)
)
d = 1
## Fit a polynomial model of degree d, and predict over the test set
M <- lm(Z ~ poly(x, d), data = df_train)
pred <- predict.lm(M, newdata = df_test)
## NB: Predictions must be a matrix-like object with named columns
pred <- as.matrix(pred)
names(pred) <- "fit"
head(pred)
colnames(pred) <- "fit"
head(pred)
fun <- function(df_train, df_test, d) {
## Fit a polynomial model of degree d, and predict over the test set
M <- lm(Z ~ poly(x, d), data = df_train)
pred <- predict.lm(M, newdata = df_test)
## NB: Predictions must be a matrix-like object with named columns
pred <- as.matrix(pred)
colnames(pred) <- "fit"
return(pred)
}
diagnostic_fun <- function(df) {
with(df, c(
RMSE = sqrt(mean((Z - fit)^2)),
MAE  = mean(abs(Z - fit))
))
}
testargs_object <- test_arguments(
fun, df_train, df_test, diagnostic_fun,
arguments = list(d = 1:4)
)
plot_diagnostics(testargs_object)
optimal_arguments(testargs_object)
?lm
devtools::load_all(".")
vignette("testarguments")
?glm
devtools::build_vignettes()
vignette("testarguments")
devtools::build_vignettes()
vignette("testarguments")
devtools::build_vignettes()
vignette("testarguments")
devtools::build_vignettes()
vignette("testarguments")
devtools::build_vignettes()
vignette("testarguments")
devtools::build_vignettes()
devtools::build_vignettes()
vignette("testarguments")
devtools::build_vignettes()
vignette("testarguments")
devtools::build_vignettes()
vignette("testarguments")
devtools::build_vignettes()
vignette("testarguments")
devtools::document()
devtools::build_manual()
devtools::check()
devtools::load_all(".")
vignette("testarguments")
library("devtools")
document()
build_vignettes()
document()
build_vignettes()
vignette("testarguments")
document()
vignette("testarguments")
build_vignettes()
vignette("testarguments")
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::build_manual()
R.version
devtools::document()
devtools::build_manual()
R.version
devtools::document()
install.packages("devtools")
devtools::check()
install.packages("ggplot2")
library("devtools")
devtools::load_all()
install.packages('reshape2','plyr','dplyr')
install.packages(c('reshape2','plyr','dplyr'))
devtools::load_all()
devtools::check()
devtools::document()
devtools::build_vignettes()
.Last.error.trace
devtools::load_all(".")
devtools::load_all(".")
R.version
devtools::document()
devtools::build_vignettes()
devtools::check()
vignette("testarguments")
vignette("testarguments")
devtools::load_all(".")
devtools::document()
devtools::build_manual()
vignette("testarguments")
devtools::load_all(".")
devtools::document()
devtools::build_manual()
vignette("testarguments")
devtools::install_github("MattSainsbury-Dale/testarguments")
vignette("testarguments")
vignette("testarguments", build_vignette = TRUE)
devtools::install_github("MattSainsbury-Dale/testarguments", build_vignettes = TRUE)
devtools::install_github("MattSainsbury-Dale/testarguments", build_vignettes = TRUE, force = TRUE)
vignette("testarguments")
devtools::install_github("MattSainsbury-Dale/testarguments", build_vignettes = TRUE, force = TRUE)
vignette("testarguments")
?testargs
?test_arguments
library("testarguments")
?test_arguments
devtools::load_all(".")
devtools::build_vignettes()
install.packages("rmarkdown")
install.packages("markdown")
devtools::build_vignettes()
devtools::load_all(".")
devtools::build_vignettes()
vignette("testarguments")
devtools::build_vignettes()
vignette("testarguments")
devtools::load_all(".")
devtools::document()
devtools::build_manual()
devtools::load_all(".")
library("devtools")
document()
build_manual()
build_vignettes()
check()
devtools::load_all(".")
devtools::document()
devtools::build_manual()
devtools::document()
library("devtools")
build_manual()
toy <- function() {document();build_manual()}
toy()
toy()
toy()
toy()
toy()
toy()
toy()
devtools::load_all(".")
toy()
toy()
toy()
toy()
toy()
toy()
toy()
library("devtools")
toy <- function(){document();build_manual()}
toy()
toy(0)
toy()
build_vignettes()
toy()
toy()
toy()
devtools::load_all(".")
toy()
build_vignettes()
toy()
vignette("testarguments")
toy()
toy()
toy()
toy()
toy()
toy()
toy()
toy()
toy()
toy(0)
toy()
toy()
toy()
toy()
toy()
toy()
toy()
toy()
build_vignettes()
check()
devtools::load_all(".")
toy()
build_vignettes()
check(env_vars = c(NOT_CRAN = "false"))
